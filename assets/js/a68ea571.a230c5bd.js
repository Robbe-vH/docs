"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[56636],{56733:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=s(85893),i=s(11151);const r={sidebar_position:11,sidebar_label:"ReportPortal 23.1 File storage options"},l="ReportPortal 23.1 File storage options",o={id:"installation-steps/ReportPortal23.1FileStorageOptions",title:"ReportPortal 23.1 File storage options",description:"In ReportPortal 23.1 we can use multiple ways to store log attachments, user pictures and plugins.",source:"@site/docs/installation-steps/ReportPortal23.1FileStorageOptions.md",sourceDirName:"installation-steps",slug:"/installation-steps/ReportPortal23.1FileStorageOptions",permalink:"/docs/installation-steps/ReportPortal23.1FileStorageOptions",draft:!1,unlisted:!1,editUrl:"https://github.com/reportportal/docs/blob/develop/docs/installation-steps/ReportPortal23.1FileStorageOptions.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,sidebar_label:"ReportPortal 23.1 File storage options"},sidebar:"docs",previous:{title:"Migrate one instance to another",permalink:"/docs/installation-steps/MigrateOneInstanceToAnother"},next:{title:"Scaling Up the ReportPortal Service API",permalink:"/docs/installation-steps/ScalingUpReportPortalAPIService"}},a={},c=[{value:"AWS S3",id:"aws-s3",level:2},{value:"MinIO",id:"minio",level:2},{value:"File system",id:"file-system",level:2}];function d(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"reportportal-231-file-storage-options",children:"ReportPortal 23.1 File storage options"}),"\n",(0,t.jsx)(n.p,{children:"In ReportPortal 23.1 we can use multiple ways to store log attachments, user pictures and plugins."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"AWS S3"}),"\n",(0,t.jsx)(n.li,{children:"MinIO distributed object storage"}),"\n",(0,t.jsx)(n.li,{children:"File system"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Currently we have 2 file storage systems: ",(0,t.jsx)(n.strong,{children:"multi-bucket"})," and ",(0,t.jsx)(n.strong,{children:"single-bucket"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"In the multi-bucket system structure of buckets looks like this:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"bucketPrefix"})," + \u2018keystore\u2019 (bucket for storing integration secrets)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"bucketPrefix"})," + \u2018users\u2019 (bucket for storing user data)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"defaultBucketName"})," (bucket for storing plugins)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"bucketPrefix + projectId"})," (bucket for storing project attachments)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In the single-bucket system structure of single-bucket is the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"*singleBucketName/*integration-secrets/ (prefix for integration secrets)"}),"\n",(0,t.jsx)(n.li,{children:"*singleBucketName/*user-data/ (prefix for user data)"}),"\n",(0,t.jsx)(n.li,{children:"*singleBucketName/*plugins/ (prefix for plugins)"}),"\n",(0,t.jsx)(n.li,{children:"*singleBucketName/*project-data/projectId (prefix for project attachments)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"aws-s3",children:"AWS S3"}),"\n",(0,t.jsxs)(n.p,{children:["Amazon Simple Storage Service (Amazon S3) is an object storage service offering industry-leading scalability, data availability, security, and performance. Bucket names must be unique across all AWS accounts in all the AWS Regions within a partition. A partition is a grouping of ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/general/latest/gr/s3.html",children:"Regions"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"To set up AWS S3 in API, UAT & Jobs services use the following variables:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DATASTORE_TYPE: s3"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_ACCESSKEY for AWS S3 AccessKey"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_SECRETKEY for AWS S3 SecretKey"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_REGION for AWS region"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To set up the ",(0,t.jsx)(n.strong,{children:"multi-bucket"})," system, use the following environment variables:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DATASTORE_BUCKETPREFIX for prefix of bucket name (\u2018prj-\u2018 by default)"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_DEFAULTBUCKETNAME for name of plugins bucket (\u2018rp-bucket\u2019 by default)"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To set up the ",(0,t.jsx)(n.strong,{children:"single-bucket"})," system, use the following environment variables:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DATASTORE_DEFAULTBUCKETNAME for single-bucket name"}),"\n",(0,t.jsx)(n.li,{children:"RP_FEATURE_FLAGS: singleBucket"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"minio",children:"MinIO"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://min.io/",children:"MinIO"})," is a high-performance distributed object storage server. It stays on top of S3 or any other cloud storage and allows to have a shared FS for several API, UAT & Jobs pods in Kubernetes."]}),"\n",(0,t.jsx)(n.p,{children:"To set up MinIO in services, use the following variables:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DATASTORE_TYPE: minio"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_ENDPOINT for endpoint (address)"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_ACCESSKEY for accesskey"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_SECRETKEY for secretkey"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To set the ",(0,t.jsx)(n.strong,{children:"multi-bucket"})," system, use the following environment variables:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DATASTORE_BUCKETPREFIX for prefix of bucket name (\u2018prj-\u2018 by default)"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_DEFAULTBUCKETNAME for name of plugins bucket (\u2018rp-bucket\u2019 by default)"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To set the ",(0,t.jsx)(n.strong,{children:"single-bucket"})," system, use the following environment variables:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DATASTORE_DEFAULTBUCKETNAME for single-bucket name"}),"\n",(0,t.jsx)(n.li,{children:"RP_FEATURE_FLAGS : singleBucket"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"file-system",children:"File system"}),"\n",(0,t.jsx)(n.p,{children:"The file system option is used when you want to store this data in a mounted folder in the service-api or/and service-uat."}),"\n",(0,t.jsx)(n.p,{children:"To use this option, set up environment variables like this:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DATASTORE_TYPE: filesystem"}),"\n",(0,t.jsx)(n.li,{children:"DATASTORE_PATH for path in filesystem to store files."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"It can be done in both Docker and Kubernetes ReportPortal versions."})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>l});var t=s(67294);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);